PSIS - LAB1 - Notes/Answers

I

void * -ponteiro genérico, pode ser para qualquer tipo
  <malloc.h> -> void * malloc(size_t n_Bytes)

II

The addresses of a and b are so different because a is global variable and b is
a local variable to the main.

name  |    value - address  |   type                |   Segment/Location
  a   |   0x60104c          |   int                 | Bastante da parte de baixo da memória, são apenas 7 dígitos no endereço.
  &a  |                     |   address of a        |
  b   |   0x7fffffffdcb4    |   int                 | Lá para cima.
  &b  |                     |   address of b        |
  v   |   0x7fffffffdcc0    |   vector de char      | Acima do b.
  &v  |                     |   addr 1a posição de v|
  p   |   0x7fffffffdcb8    |   pointer char        |
  &p  |                     |   address do pointer  |
  *p  |   0x602010          |   char                |
main  |   0x4005b6          |   função              | Abaixo do a.
&main |                     |   endereço da função  |
exit  |   0x4004a0          |   função              | Abaixo do a e do main.
&exit |                     |   endereço da função  |

Int -> 4 bytes (ou 2 ou 8...); Char -> 1 byte.
p.Ex: Memory  layout de 0x0000 0000 a 0xffff ffff - 2 ^32 endereços (aprox 4 GB).

1a posição de v: v[0], *v.
&v[4] endereço da 5a posição do vector.

Segmentos:

main e exit, parte amis em baixo -> Code /text Segment

onde está o a -> Data Segment. a foi lá parar porque é uma variável global/estática

Seguinte: Heap -> cresce para cima. Memória dinâmica vem para aqui (Malloc do p)
-> podemos ir criando e eliminando coisas, grande vantagem


Segmento mais em cima, com b,v,p.. -> Stack -> cresce para baixo
->Normalmente vista de pernas para o ar.
->SP, Stack Pointer, aponta para o topo da Stack (higher address - mais em baixo)
->LIFO


PC -> Program Counter,linguagem máquina para a proxima operação a ocorrer.
disassemble mostra a linguagem máquina do programa todo.

PC->
SP->0x7fffffffdcb0

III

-c para compilar apenas (Não tem main p.ex).
gcc prog1.c test1.c teste.h -o prog1 já inclui tudo

IV
void * dlopen (const char * file, RTDL_NOW)
void * dlsym (void * handle, const_char * symbol)
